//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace auction.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PrizeAuctionEntities : DbContext
    {
        public PrizeAuctionEntities()
            : base("name=PrizeAuctionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Auction> Auctions { get; set; }
        public virtual DbSet<AuctionItem> AuctionItems { get; set; }
        public virtual DbSet<AuctionItemType> AuctionItemTypes { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Bid> Bids { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<AuctionItemView> AuctionItemViews { get; set; }
        public virtual DbSet<BankView> BankViews { get; set; }
        public virtual DbSet<BidView> BidViews { get; set; }
    
        public virtual int AuctionDelete(Nullable<int> auctionId)
        {
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuctionDelete", auctionIdParameter);
        }
    
        public virtual ObjectResult<AuctionInsert_Result> AuctionInsert(Nullable<bool> active, string name, string description)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionInsert_Result>("AuctionInsert", activeParameter, nameParameter, descriptionParameter);
        }
    
        public virtual int AuctionItemDelete(Nullable<int> auctionItemId)
        {
            var auctionItemIdParameter = auctionItemId.HasValue ?
                new ObjectParameter("AuctionItemId", auctionItemId) :
                new ObjectParameter("AuctionItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuctionItemDelete", auctionItemIdParameter);
        }
    
        public virtual ObjectResult<AuctionItemInsert_Result> AuctionItemInsert(Nullable<int> itemTypeId, string name, string description, Nullable<int> auctionId, Nullable<bool> auctioned, Nullable<int> bidId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            var auctionedParameter = auctioned.HasValue ?
                new ObjectParameter("Auctioned", auctioned) :
                new ObjectParameter("Auctioned", typeof(bool));
    
            var bidIdParameter = bidId.HasValue ?
                new ObjectParameter("BidId", bidId) :
                new ObjectParameter("BidId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionItemInsert_Result>("AuctionItemInsert", itemTypeIdParameter, nameParameter, descriptionParameter, auctionIdParameter, auctionedParameter, bidIdParameter);
        }
    
        public virtual ObjectResult<AuctionItemSelect_Result> AuctionItemSelect(Nullable<int> auctionItemId)
        {
            var auctionItemIdParameter = auctionItemId.HasValue ?
                new ObjectParameter("AuctionItemId", auctionItemId) :
                new ObjectParameter("AuctionItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionItemSelect_Result>("AuctionItemSelect", auctionItemIdParameter);
        }
    
        public virtual ObjectResult<AuctionItemSelectForAuctionId_Result> AuctionItemSelectForAuctionId(Nullable<int> auctionId)
        {
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionItemSelectForAuctionId_Result>("AuctionItemSelectForAuctionId", auctionIdParameter);
        }
    
        public virtual int AuctionItemTypeDelete(Nullable<int> itemTypeId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuctionItemTypeDelete", itemTypeIdParameter);
        }
    
        public virtual ObjectResult<AuctionItemTypeInsert_Result> AuctionItemTypeInsert(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionItemTypeInsert_Result>("AuctionItemTypeInsert", nameParameter);
        }
    
        public virtual ObjectResult<AuctionItemTypeSelect_Result> AuctionItemTypeSelect(Nullable<int> itemTypeId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionItemTypeSelect_Result>("AuctionItemTypeSelect", itemTypeIdParameter);
        }
    
        public virtual ObjectResult<AuctionItemTypeSelectAll_Result> AuctionItemTypeSelectAll(Nullable<int> itemTypeId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionItemTypeSelectAll_Result>("AuctionItemTypeSelectAll", itemTypeIdParameter);
        }
    
        public virtual int AuctionItemTypeUpdate(Nullable<int> itemTypeId, string name)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuctionItemTypeUpdate", itemTypeIdParameter, nameParameter);
        }
    
        public virtual int AuctionItemUpdate(Nullable<int> auctionItemId, Nullable<int> itemTypeId, string name, string description, Nullable<int> auctionId, Nullable<bool> auctioned, Nullable<int> bidId)
        {
            var auctionItemIdParameter = auctionItemId.HasValue ?
                new ObjectParameter("AuctionItemId", auctionItemId) :
                new ObjectParameter("AuctionItemId", typeof(int));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            var auctionedParameter = auctioned.HasValue ?
                new ObjectParameter("Auctioned", auctioned) :
                new ObjectParameter("Auctioned", typeof(bool));
    
            var bidIdParameter = bidId.HasValue ?
                new ObjectParameter("BidId", bidId) :
                new ObjectParameter("BidId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuctionItemUpdate", auctionItemIdParameter, itemTypeIdParameter, nameParameter, descriptionParameter, auctionIdParameter, auctionedParameter, bidIdParameter);
        }
    
        public virtual ObjectResult<AuctionSelect_Result> AuctionSelect(Nullable<int> auctionId)
        {
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionSelect_Result>("AuctionSelect", auctionIdParameter);
        }
    
        public virtual ObjectResult<AuctionSelectAll_Result> AuctionSelectAll(Nullable<int> auctionId)
        {
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuctionSelectAll_Result>("AuctionSelectAll", auctionIdParameter);
        }
    
        public virtual int AuctionUpdate(Nullable<int> auctionId, Nullable<bool> active, string name, string description)
        {
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuctionUpdate", auctionIdParameter, activeParameter, nameParameter, descriptionParameter);
        }
    
        public virtual int BankDelete(Nullable<int> bankId)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BankDelete", bankIdParameter);
        }
    
        public virtual ObjectResult<BankInsert_Result> BankInsert(Nullable<int> personId, Nullable<int> auctionId, Nullable<decimal> bank)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            var bankParameter = bank.HasValue ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankInsert_Result>("BankInsert", personIdParameter, auctionIdParameter, bankParameter);
        }
    
        public virtual ObjectResult<BankSelect_Result> BankSelect(Nullable<int> bankId)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankSelect_Result>("BankSelect", bankIdParameter);
        }
    
        public virtual ObjectResult<BankSelectForAuctionAndPerson_Result> BankSelectForAuctionAndPerson(Nullable<int> auctionId, Nullable<int> personId)
        {
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankSelectForAuctionAndPerson_Result>("BankSelectForAuctionAndPerson", auctionIdParameter, personIdParameter);
        }
    
        public virtual int BankUpdate(Nullable<int> bankId, Nullable<int> personId, Nullable<int> auctionId, Nullable<decimal> bank)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            var bankParameter = bank.HasValue ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BankUpdate", bankIdParameter, personIdParameter, auctionIdParameter, bankParameter);
        }
    
        public virtual int BidDelete(Nullable<int> bidId)
        {
            var bidIdParameter = bidId.HasValue ?
                new ObjectParameter("BidId", bidId) :
                new ObjectParameter("BidId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BidDelete", bidIdParameter);
        }
    
        public virtual ObjectResult<BidInsert_Result> BidInsert(Nullable<int> personId, Nullable<int> auctionItemId, Nullable<decimal> bidAmount)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var auctionItemIdParameter = auctionItemId.HasValue ?
                new ObjectParameter("AuctionItemId", auctionItemId) :
                new ObjectParameter("AuctionItemId", typeof(int));
    
            var bidAmountParameter = bidAmount.HasValue ?
                new ObjectParameter("BidAmount", bidAmount) :
                new ObjectParameter("BidAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BidInsert_Result>("BidInsert", personIdParameter, auctionItemIdParameter, bidAmountParameter);
        }
    
        public virtual ObjectResult<BidSelect_Result> BidSelect(Nullable<int> bidId)
        {
            var bidIdParameter = bidId.HasValue ?
                new ObjectParameter("BidId", bidId) :
                new ObjectParameter("BidId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BidSelect_Result>("BidSelect", bidIdParameter);
        }
    
        public virtual ObjectResult<BidSelectForAuctionAndPerson_Result> BidSelectForAuctionAndPerson(Nullable<int> auctionId, Nullable<int> personId)
        {
            var auctionIdParameter = auctionId.HasValue ?
                new ObjectParameter("AuctionId", auctionId) :
                new ObjectParameter("AuctionId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BidSelectForAuctionAndPerson_Result>("BidSelectForAuctionAndPerson", auctionIdParameter, personIdParameter);
        }
    
        public virtual int BidUpdate(Nullable<int> bidId, Nullable<int> personId, Nullable<int> auctionItemId, Nullable<decimal> bidAmount)
        {
            var bidIdParameter = bidId.HasValue ?
                new ObjectParameter("BidId", bidId) :
                new ObjectParameter("BidId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var auctionItemIdParameter = auctionItemId.HasValue ?
                new ObjectParameter("AuctionItemId", auctionItemId) :
                new ObjectParameter("AuctionItemId", typeof(int));
    
            var bidAmountParameter = bidAmount.HasValue ?
                new ObjectParameter("BidAmount", bidAmount) :
                new ObjectParameter("BidAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BidUpdate", bidIdParameter, personIdParameter, auctionItemIdParameter, bidAmountParameter);
        }
    
        public virtual int PersonDelete(Nullable<int> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonDelete", personIdParameter);
        }
    
        public virtual ObjectResult<PersonInsert_Result> PersonInsert(Nullable<bool> active, string firstName, string lastName, string mobilePhone)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonInsert_Result>("PersonInsert", activeParameter, firstNameParameter, lastNameParameter, mobilePhoneParameter);
        }
    
        public virtual ObjectResult<PersonSelect_Result> PersonSelect(Nullable<int> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonSelect_Result>("PersonSelect", personIdParameter);
        }
    
        public virtual ObjectResult<PersonSelectActive_Result> PersonSelectActive(Nullable<int> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonSelectActive_Result>("PersonSelectActive", personIdParameter);
        }
    
        public virtual ObjectResult<PersonSelectByName_Result> PersonSelectByName(Nullable<int> name)
        {
            var nameParameter = name.HasValue ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonSelectByName_Result>("PersonSelectByName", nameParameter);
        }
    
        public virtual int PersonUpdate(Nullable<int> personId, Nullable<bool> active, string firstName, string lastName, string mobilePhone)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonUpdate", personIdParameter, activeParameter, firstNameParameter, lastNameParameter, mobilePhoneParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
